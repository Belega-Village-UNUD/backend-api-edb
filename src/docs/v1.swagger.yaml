openapi: 3.0.0
info:
  title: Belega Commerce
  description: >-
    This is the API Collection for Belega Commerce using Express JS, it runs Google API
  version: 1.0.0
servers:
- url: https://belega-commerce-api-staging-tku2lejm6q-et.a.run.app
  description: Staging server
- url: http://localhost:3333
  description: Local server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    noauthAuth:
      type: http
      scheme: noauth
security:
- bearerAuth: []
tags:
- name: auth
  description: authentication such as otp, login, password
- name: auth > otp
  description: >-
    This is the collection for the OTP endpoint, it should resend the OTP and verifying the OTP
- name: auth > password
  description: this is the endpoint for modifying the users passwords
- name: checkhealth
  description: this is the endpoint for server checkhealth
- name: profile
  description: >-
    This is the collection of profile RUD, the profile is automatically created when user register using the \`/auth\` endpoint
- name: google
  description: This is Development only API for request authorization URL for Google API
paths:
  /api/auth/otp/verify:
    post:
      tags:
      - auth > otp
      summary: verify
      description: >-
        This API endpoint is used to verify an OTP (One-Time Password) for authentication. It is an HTTP POST request sent to `{{host}}/api/auth/otp/verify`. #magic___^_^___line #magic___^_^___line ### Request Parameters #magic___^_^___line #magic___^_^___line The request does not require any specific parameters. However, it is expected to contain the OTP value in the request body. #magic___^_^___line #magic___^_^___line ### Response #magic___^_^___line #magic___^_^___line The response will have the following properties: #magic___^_^___line #magic___^_^___line - `status`: An integer representing the status of the request. A value of `0` indicates success. #magic___^_^___line - `message`: A string containing any additional information or error message. #magic___^_^___line - `success`: A boolean value indicating the success of the OTP verification. #magic___^_^___line - `data`: An object containing additional data related to the request. In this case, it will contain a `token` property, which is an empty string. #magic___^_^___line #magic___^_^___line ### Examples #magic___^_^___line #magic___^_^___line Example response for a successful OTP verification: #magic___^_^___line #magic___^_^___line ``` #magic___^_^___line {
          "status": 0,
          "message": "",
          "success": true,
          "data": {
            "token": ""
          }
        }

         ```

        Please note that the `token` property will have a value in a real-world scenario, but it is empty in this example for security reasons.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                otp: E8F2
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '303'
            ETag:
              schema:
                type: string
                example: W/"12f-bPcSlaj3DPDUc3YiZDf21z11iIw"
            Date:
              schema:
                type: string
                example: Sun, 12 Nov 2023 15:42:01 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 200
                message: You are verified!
                success: true
                data:
                  token: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ii1CaUFNaDc1TFgiLCJlbWFpbCI6ImdyaWNvd2lqYXlhQGdtYWlsLmNvbSIsInJvbGUiOlsiVlZjQXlJWGV2aSJdLCJpYXQiOjE2OTk4MDM3MjEsImV4cCI6MTY5OTgxNDUyMX0.uI3RaGIG07tmlGkoiXr6BiipJXCtjkvgkPTa3yLajIU
        '400':
          description: Bad Request
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '99'
            ETag:
              schema:
                type: string
                example: W/"63-ikOaHdt1hpwz77QroKHC6F0HEXY"
            Date:
              schema:
                type: string
                example: Sun, 12 Nov 2023 15:42:11 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 400
                message: OTP expired, please request another OTP Code
                success: false
                data: null
  /api/auth/otp:
    post:
      tags:
      - auth > otp
      summary: otp
      description: >-
        This is for requesting another OTP value for identification, this is because the users sometimes forgot to verify the account or does not verify, it can read the JWT Token from register, login, but if it does not have a Token user can post a JSON email body
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: gricowijaya@gmail.com
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '98'
            ETag:
              schema:
                type: string
                example: W/"62-ELD/TAAPnrN43D4e51zzZu7/O6I"
            Date:
              schema:
                type: string
                example: Sun, 12 Nov 2023 15:40:13 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: using email
                  value:
                    status: 200
                    message: Please check your email for your OTP Request
                    success: true
                    data: null
                example-1:
                  summary: using jwt
                  value:
                    status: 200
                    message: Please check your email for your OTP Request
                    success: true
                    data: null
    get:
      tags:
      - auth > otp
      summary: otp
      description: "Endpoint for get the timestamp of the Users OTP, it is required for the countdown of the frontend to get the OTP timestamp from the server  \n            #magic___^_^___line\nThis endpoint requires the JWT Token"
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '115'
            ETag:
              schema:
                type: string
                example: W/"73-jr47GD5ocDuCB/FQreCy/LEiQNU"
            Date:
              schema:
                type: string
                example: Fri, 24 Nov 2023 16:57:18 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 200
                message: This is the OTP timestamp
                success: true
                data:
                  createdAt: '2023-11-24T16:53:14.323Z'
  /api/auth/password/reset:
    put:
      tags:
      - auth > password
      summary: reset
      description: >-
        This endpoint is for resetting the password and after verifying the OTP that has been given when user consume `/api/auth/password/forgot` endpoint and uses the token from verifying the OTP


        it takes only the new password without the oldPassword the roles in here should be either Users, or Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                newPassword: testing.!
                confirmNewPassword: testing.!
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/auth/password/change:
    put:
      tags:
      - auth > password
      summary: change
      description: >-
        This endpoint is for changing the password and after the user logged, it takes the old Password, new password. The roles in here should be either Buyer or Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                oldPassword: GeRicO21.
                newPassword: testing.!
                confirmNewPassword: testing.!
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/auth/password/forgot:
    post:
      tags:
      - auth > password
      summary: forgot
      description: >-
        This is the forgot password endoint that received the email and sending an OTP that used for endpoint `/api/auth/password/reset`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: gricowijaya@gmail.com
      security:
      - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/auth/login:
    post:
      tags:
      - auth
      summary: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: gricowijaya@gmail.com
                password: GeRicO21.
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '405'
            ETag:
              schema:
                type: string
                example: W/"195-ytUGptMt7+1CvTM/WZrWMKnJqRo"
            Date:
              schema:
                type: string
                example: Sun, 12 Nov 2023 15:42:39 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 200
                message: Login success
                success: true
                data:
                  payload:
                    id: '-BiAMh75LX'
                    email: gricowijaya@gmail.com
                    role_id:
                    - VVcAyIXevi
                    is_verified: true
                  token: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ii1CaUFNaDc1TFgiLCJlbWFpbCI6ImdyaWNvd2lqYXlhQGdtYWlsLmNvbSIsInJvbGUiOlsiVlZjQXlJWGV2aSJdLCJpYXQiOjE2OTk4MDM3NTksImV4cCI6MTY5OTgxNDU1OX0.j3VK18ZKAI9vaGjLFrxhkbdeg06ghn2DHNfaqmgiXOg
        '401':
          description: Unauthorized
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '105'
            ETag:
              schema:
                type: string
                example: W/"69-X7HfOzPNYng2zv2udDDKVxhPFME"
            Date:
              schema:
                type: string
                example: Sun, 12 Nov 2023 15:42:59 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 401
                message: Password credentials do not match with our records
                success: false
                data: null
  /api/auth/register:
    post:
      tags:
      - auth
      summary: register
      description: >-
        This is the Register API, it triggers the creation of users and users should be verified
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: gricowijaya@gmail.com
                password: GeRicO21.
                confirmPassword: GeRicO21.
      responses:
        '201':
          description: Created
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '279'
            ETag:
              schema:
                type: string
                example: W/"117-maIb6eX7ybBZl5jiTY6rGILKGBo"
            Date:
              schema:
                type: string
                example: Mon, 13 Nov 2023 18:36:24 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 201
                message: Register success
                success: true
                data:
                  token: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1haGFwdXRyYTk3MUBnbWFpbC5jb20iLCJyb2xlIjpbIlZWY0F5SVhldmkiXSwiaWF0IjoxNjk5OTAwNTg0LCJleHAiOjE2OTk5MTEzODR9.Emj98opArI29XC59C_IrPq8CV4qMB8oDtiJo1aGBLHg
  /:
    get:
      tags:
      - checkhealth
      summary: root
      description: root server checkhealth
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '59'
            ETag:
              schema:
                type: string
                example: W/"3b-ogY3Sl33VhNBUeNv94+h0Fc9R5E"
            Date:
              schema:
                type: string
                example: Sun, 12 Nov 2023 15:43:27 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 200
                message: Server is healthy
                success: true
  /api:
    get:
      tags:
      - checkhealth
      summary: api
      description: api routes checkhealth
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '63'
            ETag:
              schema:
                type: string
                example: W/"3f-ZTztjCU/x0nkbMBXu3feaiLSPPQ"
            Date:
              schema:
                type: string
                example: Sun, 12 Nov 2023 15:43:21 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 200
                message: Server API is healthy
                success: true
  /test:
    post:
      tags:
      - checkhealth
      summary: Test Request
      description: api routes checkhealth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: gricowijaya@gmail.com
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '63'
            ETag:
              schema:
                type: string
                example: W/"3f-ZTztjCU/x0nkbMBXu3feaiLSPPQ"
            Date:
              schema:
                type: string
                example: Sun, 12 Nov 2023 15:43:21 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 200
                message: Server API is healthy
                success: true
  /api/profiles:
    get:
      tags:
      - profile
      summary: whoami
      description: >-
        This is the endpoint that after user logon into the systems, it reads the Bearer Token for identifying the Profiles.
      responses:
        '200':
          description: OK
          headers:
            x-powered-by:
              schema:
                type: string
                example: Express
            access-control-allow-origin:
              schema:
                type: string
                example: '*'
            content-type:
              schema:
                type: string
                example: application/json; charset=utf-8
            etag:
              schema:
                type: string
                example: W/"1df-QrF3IDBvcFyb5y8SYc3f3G4cvgU"
            X-Cloud-Trace-Context:
              schema:
                type: string
                example: 5996c1521de6f203768f30f621408e66;o=1
            Date:
              schema:
                type: string
                example: Thu, 16 Nov 2023 04:44:26 GMT
            Server:
              schema:
                type: string
                example: Google Frontend
            Content-Length:
              schema:
                type: integer
                example: '479'
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
          content:
            application/json:
              schema:
                type: object
              example:
                status: 200
                message: Successfully get profile
                success: true
                data:
                  user:
                    id: 2GNhkWVuGn
                    email: gricowijaya@gmail.com
                    role_id:
                    - VVcAyIXevi
                    is_verified: true
                    createdAt: '2023-11-13T19:25:48.146Z'
                    updatedAt: '2023-11-13T19:27:00.855Z'
                  profile:
                    id: '-_gcO6kPb-'
                    user_id: 2GNhkWVuGn
                    avatar_link: null
                    name: Gede Rico Wijaya
                    phone: null
                    address: null
                    description: null
                    createdAt: '2023-11-13T19:25:48.185Z'
                    updatedAt: '2023-11-13T20:22:55.572Z'
    delete:
      tags:
      - profile
      summary: profiles
      description: >-
        This is the endpoint for deleting user profiles, only send the email for the user that you want to delete, **ONLY USE FOR DEVELOPMENT**
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '66'
            ETag:
              schema:
                type: string
                example: W/"42-ha56rT1ll3aONwSrW0sERi0moi8"
            Date:
              schema:
                type: string
                example: Sun, 12 Nov 2023 16:07:29 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 200
                message: User deleted
                success: true
                data: null
    put:
      tags:
      - profile
      summary: update
      description: >-
        This is the update profile API, it takes the phone, address, description, the avatar link should be in a different routes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Gede Rico Wijaya
                phone: null
                address: null
                description: null
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '540'
            ETag:
              schema:
                type: string
                example: W/"21c-8ebAxSoWecG+cUaA4olELe+fWcY"
            Date:
              schema:
                type: string
                example: Tue, 21 Nov 2023 09:08:20 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 200
                message: Successfully update profile
                success: true
                data:
                  user:
                    id: 2GNhkWVuGn
                    email: gricowijaya@gmail.com
                    role_id:
                    - VVcAyIXevi
                    is_verified: true
                    createdAt: '2023-11-13T19:25:48.146Z'
                    updatedAt: '2023-11-13T19:27:00.855Z'
                  profile:
                    id: '-_gcO6kPb-'
                    user_id: 2GNhkWVuGn
                    avatar_link: >-
                      https://ik.imagekit.io/esp6kyxwz/1700555986186_A8-jXz5mu.png
                    name: Gede Rico Wijaya
                    phone: null
                    address: null
                    description: null
                    createdAt: '2023-11-13T19:25:48.185Z'
                    updatedAt: '2023-11-21T09:08:20.137Z'
  /api/profiles/avatar:
    post:
      tags:
      - profile
      summary: avatar
      description: >-
        This API endpoint allows you to upload an avatar image for a user profile. It is an HTTP POST request to `{{host}}/api/profiles/avatar`.


        ### Request Parameters


        This request does not require any specific parameters in the request body. However, the avatar image file should be included as part of the request.


        ### Response


        The response will have a status code of 200 if the request is successful. The response body will be in JSON format and will have the following properties:


        - `status`: Indicates the status of the request. In this case, the value is 0, which means the request was successful.

        - `message`: A message related to the status of the request. In this case, it is an empty string.

        - `success`: Indicates whether the request was successful or not. In this case, the value is `true`.

        - `data`: Contains additional data related to the request. It has the following properties:
            - `user`: Contains information about the user associated with the profile. It has the following properties:
                - `id`: The unique identifier of the user.
                - `email`: The email address of the user.
                - `role_id`: An array of role identifiers assigned to the user.
                - `is_verified`: Indicates whether the user is verified or not.
                - `createdAt`: The date and time when the user was created.
                - `updatedAt`: The date and time when the user was last updated.
            - `profile`: Contains information about the user's profile. It has the following properties:
                - `id`: The unique identifier of the profile.
                - `user_id`: The unique identifier of the user associated with the profile.
                - `avatar_link`: The URL of the uploaded avatar image.
                - `name`: The name associated with the profile.
                - `phone`: The phone number associated with the profile (can be null).
                - `address`: The address associated with the profile (can be null).
                - `description`: The description associated with the profile (can be null).
                - `createdAt`: The date and time when the profile was created.
                - `updatedAt`: The date and time when the profile was last updated.
            - `url`: The URL of the uploaded avatar image.

        ### Example Response


        ``` json

        {
            "status": 0,
            "message": "",
            "success": true,
            "data": {
                "user": {
                    "id": "",
                    "email": "",
                    "role_id": [""],
                    "is_verified": true,
                    "createdAt": "",
                    "updatedAt": ""
                },
                "profile": {
                    "id": "",
                    "user_id": "",
                    "avatar_link": "",
                    "name": "",
                    "phone": null,
                    "address": null,
                    "description": null,
                    "createdAt": "",
                    "updatedAt": ""
                },
                "url": ""
            }
        }

         ```
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '608'
            ETag:
              schema:
                type: string
                example: W/"260-XSNjIPYfc3ipDerckQ7LMZgAK7c"
            Date:
              schema:
                type: string
                example: Mon, 20 Nov 2023 15:43:06 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 200
                message: Successfully Update Avatar
                success: true
                data:
                  user:
                    id: 2GNhkWVuGn
                    email: gricowijaya@gmail.com
                    role_id:
                    - VVcAyIXevi
                    is_verified: true
                    createdAt: '2023-11-13T19:25:48.146Z'
                    updatedAt: '2023-11-13T19:27:00.855Z'
                  profile:
                    id: '-_gcO6kPb-'
                    user_id: 2GNhkWVuGn
                    avatar_link: >-
                      https://ik.imagekit.io/esp6kyxwz/1700494981986_7_ZozKLhJ.png
                    name: Gede Rico Wijaya
                    phone: null
                    address: null
                    description: null
                    createdAt: '2023-11-13T19:25:48.185Z'
                    updatedAt: '2023-11-20T15:43:05.585Z'
                  url: https://ik.imagekit.io/esp6kyxwz/1700494981986_7_ZozKLhJ.png
  /api/google:
    get:
      tags:
      - google
      summary: get authorization url
      description: >-
        This is the endpoint for getting authorization endpoint in Google API for getting the refresh token, **ONLY USE THIS ENDPOINT FOR DEVELOPMENT**
      security:
      - noauthAuth: []
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '410'
            ETag:
              schema:
                type: string
                example: W/"19a-cqXuYU2IE+i3nr89p/zYnYShFzg"
            Date:
              schema:
                type: string
                example: Mon, 13 Nov 2023 18:23:39 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: 200
                message: Successfully Redirect to Google OAuth2
                success: true
                data:
                  url: >-
                    https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&scope=https%3A%2F%2Fmail.google.com&prompt=consent&include_granted_scopes=true&response_type=code&client_id=548173948719-f1771t9erma63c9su8kmpkv07i8f43se.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fdevelopers.google.com%2Foauthplayground
